Retrieving Results

Retrieving All Rows From A Table:
$users = DB::table('users')->get();

Retrieving A Single Row / Column From A Table:
$user = DB::table('users')->where('name', 'John')->first();

you may extract a single value from a record using the  value method. This method will return the value of the column directly:
$email = DB::table('users')->where('name', 'John')->value('email');


Retrieving A List Of Column Values:
$titles = DB::table('roles')->pluck('title');

Chunking Results:
DB::table('users')->orderBy('id')->chunk(100, function ($users) {
    foreach ($users as $user) {
        //
    }
});

Inserts:
The query builder also provides an insert method for inserting records into the database table. The insert method accepts an array of column names and values:

DB::table('users')->insert(
    ['email' => 'john@example.com', 'votes' => 0]
);

Updates
Of course, in addition to inserting records into the database, the query builder can also update existing records using the update method. The update method, like the insert method, accepts an array of column and value pairs containing the columns to be updated. You may constrain the update query using where clauses:

DB::table('users')
            ->where('id', 1)
            ->update(['votes' => 1]);

Deletes:
You may constrain delete statements by adding where clauses before calling the delete method:

DB::table('users')->delete();

DB::table('users')->where('votes', '>', 100)->delete();
If you wish to truncate the entire table, which will remove all rows and reset the auto-incrementing ID to zero, you may use the truncate method:

DB::table('users')->truncate();

Aggregates:
The query builder also provides a variety of aggregate methods such as count, max, min,  avg, and sum. You may call any of these methods after constructing your query:

$users = DB::table('users')->count();
$price = DB::table('orders')->max('price');

